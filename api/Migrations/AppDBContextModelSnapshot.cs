// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Config;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("api.Models.Avaliacao", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("estabelecimentoid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("mensagem")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("nota")
                        .HasColumnType("INTEGER");

                    b.Property<int>("usuarioid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("estabelecimentoid");

                    b.HasIndex("usuarioid");

                    b.ToTable("Avaliacoes");
                });

            modelBuilder.Entity("api.Models.Cronograma", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("custo_maximo")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateOnly>("data")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("hora_fim")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("hora_inicio")
                        .HasColumnType("TEXT");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("publico")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("Cronogramas");
                });

            modelBuilder.Entity("api.Models.Empresa", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("cnpj")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("api.Models.Estabelecimento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("cnpj")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("endereco")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("horario_abertura")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("horario_fechamento")
                        .HasColumnType("TEXT");

                    b.Property<string>("imagem")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nivel_preco")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("site")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("telefone_contato")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("tipo_estabelecimento_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("tipo_estabelecimento_id");

                    b.ToTable("Estabelecimentos");
                });

            modelBuilder.Entity("api.Models.EstabelecimentoCronograma", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("cronogramaid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("estabelecimentoid")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("horario")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("cronogramaid");

                    b.HasIndex("estabelecimentoid");

                    b.ToTable("EstabelecimentoCronogramas");
                });

            modelBuilder.Entity("api.Models.Excursao", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("cronogramaid")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("data")
                        .HasColumnType("TEXT");

                    b.Property<string>("descricao")
                        .HasColumnType("TEXT");

                    b.Property<int>("empresaid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("local_destino")
                        .HasColumnType("TEXT");

                    b.Property<string>("local_partida")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("preco")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("id");

                    b.HasIndex("cronogramaid");

                    b.HasIndex("empresaid");

                    b.ToTable("Excursoes");
                });

            modelBuilder.Entity("api.Models.FavoritoCronograma", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("apelido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("cronogramaid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("usuarioid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("cronogramaid");

                    b.HasIndex("usuarioid");

                    b.ToTable("FavoritosCronogramas");
                });

            modelBuilder.Entity("api.Models.FavoritoEstabelecimento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("apelido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("estabelecimentoid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("usuarioid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("estabelecimentoid");

                    b.HasIndex("usuarioid");

                    b.ToTable("FavoritosEstabelecimentos");
                });

            modelBuilder.Entity("api.Models.FavoritoExcursao", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("apelido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("excursaoid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("usuarioid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("excursaoid");

                    b.HasIndex("usuarioid");

                    b.ToTable("FavoritosExcursoes");
                });

            modelBuilder.Entity("api.Models.TipoEstabelecimento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("TiposEstabelecimentos");
                });

            modelBuilder.Entity("api.Models.Usuario", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("cep")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("cpf")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("senha")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("sobrenome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("telefone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("api.Models.UsuarioCronograma", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Cronogramaid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("papel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("usuarioid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("Cronogramaid");

                    b.HasIndex("usuarioid");

                    b.ToTable("UsuariosCronogramas");
                });

            modelBuilder.Entity("api.Models.Avaliacao", b =>
                {
                    b.HasOne("api.Models.Estabelecimento", "estabelecimento")
                        .WithMany()
                        .HasForeignKey("estabelecimentoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Usuario", "usuario")
                        .WithMany("avaliacoes")
                        .HasForeignKey("usuarioid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("estabelecimento");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("api.Models.Estabelecimento", b =>
                {
                    b.HasOne("api.Models.TipoEstabelecimento", "tipo_estabelecimento")
                        .WithMany()
                        .HasForeignKey("tipo_estabelecimento_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tipo_estabelecimento");
                });

            modelBuilder.Entity("api.Models.EstabelecimentoCronograma", b =>
                {
                    b.HasOne("api.Models.Cronograma", "cronograma")
                        .WithMany()
                        .HasForeignKey("cronogramaid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Estabelecimento", "estabelecimento")
                        .WithMany()
                        .HasForeignKey("estabelecimentoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cronograma");

                    b.Navigation("estabelecimento");
                });

            modelBuilder.Entity("api.Models.Excursao", b =>
                {
                    b.HasOne("api.Models.Cronograma", "cronograma")
                        .WithMany()
                        .HasForeignKey("cronogramaid");

                    b.HasOne("api.Models.Empresa", "empresa")
                        .WithMany("excursoes")
                        .HasForeignKey("empresaid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cronograma");

                    b.Navigation("empresa");
                });

            modelBuilder.Entity("api.Models.FavoritoCronograma", b =>
                {
                    b.HasOne("api.Models.Cronograma", "cronograma")
                        .WithMany()
                        .HasForeignKey("cronogramaid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Usuario", "usuario")
                        .WithMany("favoritos_cronogramas")
                        .HasForeignKey("usuarioid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cronograma");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("api.Models.FavoritoEstabelecimento", b =>
                {
                    b.HasOne("api.Models.Estabelecimento", "estabelecimento")
                        .WithMany()
                        .HasForeignKey("estabelecimentoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Usuario", "usuario")
                        .WithMany("favoritos_estabelecimentos")
                        .HasForeignKey("usuarioid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("estabelecimento");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("api.Models.FavoritoExcursao", b =>
                {
                    b.HasOne("api.Models.Excursao", "excursao")
                        .WithMany()
                        .HasForeignKey("excursaoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Usuario", "usuario")
                        .WithMany("favorito_excursoes")
                        .HasForeignKey("usuarioid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("excursao");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("api.Models.UsuarioCronograma", b =>
                {
                    b.HasOne("api.Models.Cronograma", null)
                        .WithMany("usuarios_cronogramas")
                        .HasForeignKey("Cronogramaid");

                    b.HasOne("api.Models.Usuario", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("api.Models.Cronograma", b =>
                {
                    b.Navigation("usuarios_cronogramas");
                });

            modelBuilder.Entity("api.Models.Empresa", b =>
                {
                    b.Navigation("excursoes");
                });

            modelBuilder.Entity("api.Models.Usuario", b =>
                {
                    b.Navigation("avaliacoes");

                    b.Navigation("favorito_excursoes");

                    b.Navigation("favoritos_cronogramas");

                    b.Navigation("favoritos_estabelecimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
